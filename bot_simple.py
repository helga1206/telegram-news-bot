#!/usr/bin/env python3
"""
Telegram News Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
–ë–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
"""

import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class NewsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.data_file = 'news_data.json'
        self.users_data = self.load_data()
        self.news_api_key = os.getenv('NEWS_API_KEY')
        self.news_api_url = 'https://newsapi.org/v2/everything'
        
    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def save_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.users_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_news(self, query: str, language: str = 'ru') -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ NewsAPI"""
        try:
            if not self.news_api_key or self.news_api_key == 'test_key':
                logger.warning("API –∫–ª—é—á –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                return [
                    {
                        'title': f'–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø–æ —Ç–µ–º–µ "{query}"',
                        'description': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.',
                        'url': 'https://example.com',
                        'publishedAt': datetime.now().isoformat()
                    }
                ]
            
            params = {
                'q': query,
                'language': language,
                'sortBy': 'publishedAt',
                'pageSize': 10,
                'apiKey': self.news_api_key
            }
            
            response = requests.get(self.news_api_url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            return data.get('articles', [])
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    def filter_news_by_keywords(self, articles: List[Dict], keywords: List[str]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not keywords:
            return articles
        
        filtered_articles = []
        for article in articles:
            title = article.get('title', '').lower()
            description = article.get('description', '').lower()
            content = f"{title} {description}"
            
            if any(keyword.lower() in content for keyword in keywords):
                filtered_articles.append(article)
        
        return filtered_articles
    
    def format_news_message(self, articles: List[Dict], topic: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        if not articles:
            return f"üì∞ –ü–æ —Ç–µ–º–µ '{topic}' –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        message = f"üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ: {topic}</b>\n\n"
        
        for i, article in enumerate(articles[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
            title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            description = article.get('description', '')
            url = article.get('url', '')
            published_at = article.get('publishedAt', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                if published_at:
                    date_obj = datetime.fromisoformat(published_at.replace('Z', '+00:00'))
                    formatted_date = date_obj.strftime('%d.%m.%Y %H:%M')
                else:
                    formatted_date = '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
            except:
                formatted_date = '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
            
            message += f"{i}. <b>{title}</b>\n"
            if description:
                message += f"   {description[:200]}{'...' if len(description) > 200 else ''}\n"
            if url:
                message += f"   üîó <a href='{url}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n"
            message += f"   üìÖ {formatted_date}\n\n"
        
        return message
    
    def add_user_topic(self, user_id: int, topic: str, keywords: List[str] = None) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users_data:
            self.users_data[user_id] = {
                'topics': [],
                'keywords': [],
                'daily_digest': True,
                'last_digest': None
            }
        
        if keywords is None:
            keywords = []
        
        self.users_data[user_id]['topics'].append({
            'name': topic,
            'keywords': keywords,
            'added_at': datetime.now().isoformat()
        })
        
        self.save_data()
    
    def remove_user_topic(self, user_id: int, topic: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–º—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users_data:
            return False
        
        topics = self.users_data[user_id]['topics']
        self.users_data[user_id]['topics'] = [t for t in topics if t['name'] != topic]
        
        self.save_data()
        return True
    
    def get_user_topics(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users_data:
            return []
        return self.users_data[user_id].get('topics', [])
    
    def toggle_daily_digest(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users_data:
            self.users_data[user_id] = {
                'topics': [],
                'keywords': [],
                'daily_digest': True,
                'last_digest': None
            }
        
        self.users_data[user_id]['daily_digest'] = not self.users_data[user_id]['daily_digest']
        self.save_data()
        return self.users_data[user_id]['daily_digest']

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
news_bot = NewsBot()

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {username}!

–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å —Ç–µ–º–∞–º.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/add_topic - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/remove_topic - –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É
/my_topics - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç–µ–º—ã
/get_news - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ
/digest - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
/toggle_digest - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã –∫–æ–º–∞–Ω–¥–æ–π /add_topic
2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
3. –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /get_news –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã
"""
    
    update.message.reply_text(welcome_message, parse_mode='HTML')

def add_topic(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_topic"""
    user_id = update.effective_user.id
    
    if not context.args:
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_topic <—Ç–µ–º–∞> [–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]\n"
            "–ü—Ä–∏–º–µ—Ä: /add_topic –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"
        )
        return
    
    topic = context.args[0]
    keywords = []
    
    if len(context.args) > 1:
        keywords = [kw.strip() for kw in ' '.join(context.args[1:]).split(',')]
    
    news_bot.add_user_topic(user_id, topic, keywords)
    
    message = f"‚úÖ –¢–µ–º–∞ '{topic}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
    if keywords:
        message += f"\nüîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}"
    
    update.message.reply_text(message)

def remove_topic(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_topic"""
    user_id = update.effective_user.id
    
    if not context.args:
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_topic <—Ç–µ–º–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /remove_topic –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        )
        return
    
    topic = ' '.join(context.args)
    
    if news_bot.remove_user_topic(user_id, topic):
        update.message.reply_text(f"‚úÖ –¢–µ–º–∞ '{topic}' —É–¥–∞–ª–µ–Ω–∞!")
    else:
        update.message.reply_text(f"‚ùå –¢–µ–º–∞ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

def my_topics(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_topics"""
    user_id = update.effective_user.id
    topics = news_bot.get_user_topics(user_id)
    
    if not topics:
        update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º.")
        return
    
    message = "üìù <b>–í–∞—à–∏ —Ç–µ–º—ã:</b>\n\n"
    for i, topic_data in enumerate(topics, 1):
        topic_name = topic_data['name']
        keywords = topic_data.get('keywords', [])
        added_at = topic_data.get('added_at', '')
        
        message += f"{i}. <b>{topic_name}</b>\n"
        if keywords:
            message += f"   üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n"
        if added_at:
            try:
                date_obj = datetime.fromisoformat(added_at)
                formatted_date = date_obj.strftime('%d.%m.%Y')
                message += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {formatted_date}\n"
            except:
                pass
        message += "\n"
    
    update.message.reply_text(message, parse_mode='HTML')

def get_news(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_news"""
    user_id = update.effective_user.id
    
    if not context.args:
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_news <—Ç–µ–º–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /get_news –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        )
        return
    
    topic = ' '.join(context.args)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    articles = news_bot.get_news(topic)
    
    if not articles:
        update.message.reply_text(f"üì∞ –ü–æ —Ç–µ–º–µ '{topic}' –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–∞ —Ç–µ–º–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    user_topics = news_bot.get_user_topics(user_id)
    for topic_data in user_topics:
        if topic_data['name'].lower() == topic.lower():
            keywords = topic_data.get('keywords', [])
            if keywords:
                articles = news_bot.filter_news_by_keywords(articles, keywords)
            break
    
    message = news_bot.format_news_message(articles, topic)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
        for part in parts:
            update.message.reply_text(part, parse_mode='HTML', disable_web_page_preview=True)
    else:
        update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)

def digest(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /digest"""
    user_id = update.effective_user.id
    topics = news_bot.get_user_topics(user_id)
    
    if not topics:
        update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞.")
        return
    
    digest_message = "üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
    has_news = False
    
    for topic_data in topics:
        topic_name = topic_data['name']
        keywords = topic_data.get('keywords', [])
        
        articles = news_bot.get_news(topic_name)
        if keywords:
            articles = news_bot.filter_news_by_keywords(articles, keywords)
        
        if articles:
            has_news = True
            digest_message += news_bot.format_news_message(articles, topic_name)
            digest_message += "\n" + "="*50 + "\n\n"
    
    if has_news:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(digest_message) > 4000:
            parts = [digest_message[i:i+4000] for i in range(0, len(digest_message), 4000)]
            for part in parts:
                update.message.reply_text(part, parse_mode='HTML', disable_web_page_preview=True)
        else:
            update.message.reply_text(digest_message, parse_mode='HTML', disable_web_page_preview=True)
    else:
        update.message.reply_text("üì∞ –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º —Ç–µ–º–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def toggle_digest(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /toggle_digest"""
    user_id = update.effective_user.id
    is_enabled = news_bot.toggle_daily_digest(user_id)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    update.message.reply_text(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã {status}!")

def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏:</b>
/add_topic <—Ç–µ–º–∞> [–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞] - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/remove_topic <—Ç–µ–º–∞> - –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É
/my_topics - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç–µ–º—ã

<b>–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>
/get_news <—Ç–µ–º–∞> - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ
/digest - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —Ç–µ–º–∞–º

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/toggle_digest - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
/add_topic –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
/get_news –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
/digest

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á NewsAPI. 
–ë–µ–∑ –Ω–µ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
"""
    
    update.message.reply_text(help_text, parse_mode='HTML')

def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    
    if update and update.effective_message:
        try:
            update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    
    if not bot_token or bot_token == 'your_bot_token_here':
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("2. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º updater
    updater = Updater(token=bot_token, use_context=True)
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("add_topic", add_topic))
    dispatcher.add_handler(CommandHandler("remove_topic", remove_topic))
    dispatcher.add_handler(CommandHandler("my_topics", my_topics))
    dispatcher.add_handler(CommandHandler("get_news", get_news))
    dispatcher.add_handler(CommandHandler("digest", digest))
    dispatcher.add_handler(CommandHandler("toggle_digest", toggle_digest))
    dispatcher.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üöÄ Telegram News Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()




